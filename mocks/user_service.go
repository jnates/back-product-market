// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	model "backend_crudgo/domain/users/domain/model"
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "backend_crudgo/types"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserService) CreateUser(ctx context.Context, user *model.User) (*types.CreateResponse, error) {
	ret := _m.Called(ctx, user)

	var r0 *types.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*types.CreateResponse, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *types.CreateResponse); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *UserService) GetUser(ctx context.Context, id string) (*types.GenericUserResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *types.GenericUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.GenericUserResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.GenericUserResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GenericUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx
func (_m *UserService) GetUsers(ctx context.Context) (*types.GenericUserResponse, error) {
	ret := _m.Called(ctx)

	var r0 *types.GenericUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.GenericUserResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.GenericUserResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GenericUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, user
func (_m *UserService) LoginUser(ctx context.Context, user *model.User) (*types.GenericUserResponse, error) {
	ret := _m.Called(ctx, user)

	var r0 *types.GenericUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*types.GenericUserResponse, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *types.GenericUserResponse); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GenericUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
